variables:
   AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
   AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
   S3_BUCKET: $S3_BUCKET
   S3_KEY: $S3_KEY
   CARAMBOLAS: "carambolas quadradas never die"
   CLOUD_FRONT_DIST_ID: $CLOUD_FRONT_DIST_ID
   CLOUD_FRONT_PATH: $CLOUD_FRONT_PATH
   PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Scripts
## Compandos para serem reaproveitados nos jobs 
.install: &install
  - yarn

.lint: &lint
  - yarn run lint:css
  - yarn run lint:js
  - echo $CARAMBOLAS
  - echo $CI_COMMIT_BRANCH
  
.test: &test
  - yarn test:ci

.build: &build
  - yarn build

# Stages:
## sao utilizados para definir ambientes onde jobs unicos devem ser rodados, tendo em vista as diferencas entre si, por exemplo:
## dev e prod, sendo que em desenvolvimento validamos os processos comuns e montamos ambiente para testes de integracao. Em producao
## apos todas as validacoes fazemos o deploy, enviamos para o bucket destino e limpamos o cache do cloudfront com create invalidate.
stages:
  - prepare
  - code_quality
  - test
  - build    
  - deploy

cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .cache/pip
    - venv/
  policy: pull-push

default:
  image:
    name: node
  stage: prepare
  script: *install

# Jobs
## Fluxo de trabalho principal para rodar instrucoes 
lint:
  image:
    name: node
  stage: code_quality
  script: *lint

# Register Docker Runner
## regustrar imagem doker do Docker Hub
test:
  stage: test
  script: *test
  only:
    variables:
      - $CI_COMMIT_BRANCH =~ /^feature\//

build:
  stage: build
  script: *build
  artifacts:
    paths:
      - dist/
      - node_modules/
  only:
    - develop
    - master
    - hotfix/*
    - release/*

deploy:release:
  stage: deploy
  script:
    - echo "deploy realeses or hotfix"
  artifacts:
    paths:
      - dist/
      - node_modules/
  only:
    - hotfix/*
    - release/*

deploy:production:
  stage: deploy 
  script:
    - echo "deplou to production"
  artifacts:
    paths:
      - dist/
      - node_modules/
  when: manual
  only:
    - master
    
## comandos relacionados a aws

# aws config cli user

# aws submit to s3

# aws cache invalidate

# criar merge request para determinada branch
## develop & master

# create merge request

